Object Oriented Language and Systems - CSC 517
Backchannel Application
_________________________________________________________________________________________

URL for Application deployed on Heroku

http://aqueous-gorge-2108.herokuapp.com/
_______________________________________________________________________________________

Login Details for Super Admin /  Super Admin credentials

username: superadmin
password: superadmin123
_______________________________________________________________________________________

Team Members
1. Raheel Kazi (rkazi)
2. Saylee Mhatre (semhatr2)
3. Shachi Khare (skhare)
__________________________________________________________________________________________

Test Framework
1. RSpec
________________________________________________________________________________________

Extra credit work

1. Search includes Autocomplete feature using jQuery
2. Voting is performed using Ajax
3. Viewing of Report is done using Ajax
4. RSPEC framework used.

________________________________________________________________________________________
Other Notes

1. Application uses AJAX for incrementing Votes as well as for Viewing Reports
2. Test cases done using RSpec
3. Super Admin can promote a user to admin as well as create a new admin
4. Super admin can revoke admin rights
5. Super admin can delete any user or admin
6. Admin can only create new admin and promote a user to admin, he cannot revoke admin rights from any admin
__________________________________________________________________________________________
Ordering of Posts

The ordering of posts works as follows.
1. Initially every post is assigned a weight of 1000.
2. When a new post is created the maximum weight from all the post’s weights is found and an additional weight of 10 is added and  assigned to the weight of this newly created post.
3. Similarly when someone likes or comments on a post, the max weight out of all the existing posts is found and an additional weight of 5 is added and assigned to the “liked” or “commented upon” post.

PS: Since voting is done using Ajax, the posts will not re-order immediately when voted up. It will re-order as soon as you reload the page (This is an ideal case as used in Facebook).
_________________________________________________________________________________________

REQUIREMENTS

Rails 4.0
Ruby 2.0
SQLite 3.7.7
__________________________________________________________________________________________

Project Running Details

Execute the following after going into the project directory

bundle
rake db:migrate
rails s
__________________________________________________________________________________________

Login Details
Initially Super Admin is the only admin that exists in the system

Super Admin credentials
username: superadmin
password: superadmin123

__________________________________________________________________________________________

Other User credentials

username : jsmith
password : password

username : knimgaonkar
password : password

username : skhan
password : password

username : ydivecha
password : password

__________________________________________________________________________________________

To run the test cases simply do the following on the terminal

rake db:migrate RAILS_ENV=test
rspec spec

__________________________________________________________________________________________
Test Case Description

Unit Test Cases:
We have created test cases for each of the model classes -
post_spec.rb
user_spec.rb
vote_spec.rb

1) post_spec.rb
This test cases tests for the presence of all the fields in the post.rb model class - content, user_id, weight, category and tag.
It valides the following:
1. The test case fails if user_id field is nil.
2. The test case fails if content of the post is nil or blank.
3. The test fails if the content of the test if longer than the enforced character limit.

2) user_spec.rb
This test case validates the presence of all the fields in the user.rb model class - username, email, first_name, last_name, password, password_confirmation
and posts.

It validates the following:
1) The username should not be blank.
2) The email should not be blank.
3) The email address should not be already taken.
4) The password should not be blank.
5) The password confirmation field should match the password entered.

3) vote_spec.rb
This test case validates the presence of all the fields in vote.rb model class - user_id, post_id.

It validates the following:
1) The test fails if the user_id is blank.
2) The test fails if the post_id is blank.

In order to run the above test cases use the following command:
bundle exec rspec spec/requests/<model>_spec.rb


Functional Test Cases:
We have written test cases for the Controllers.
1) posts_controller.rb
2) sessions_controller.rb
3) users_controller.rb

1) posts_controller_spec.rb
This test cases tests the following scenarios:
1. All the posts get displayed on the all_posts webpage.
2. When you search for a post from the search box, it displays the correct post.
3. When you create a new post, the content is updated in the database.
4. When user creates a new post, the content gets displayed on the all_posts webpage.
5. When the user edits a post, the database gets updated and the corresponding post is updated on the webpage.

2) users_controller_spec.rb
The test cases tests for the following scenarios:
1. Create a new user, the database should get updated.
2. The webpage should display the corresponding user is created, redirects to correct webpage.
3. When new admin is created, the database gets updated with the correct values.
3. When user is deleted, the corresponding entry from the database gets removed.

3) session_controller_spec.rb
The test cases tests for the following scenarios:
1. When user is able to login a session is created.
2. When the user logs out, the session gets destroyed.

Integration Tests:
We have created the following integration tests:
1. home_spec.rb - This validates the display on the home page of the application.
2. posts_spec.rb - This vaidates the display on the posts page of the application.
3. users_spec.rb - This validates the correct user login. It fails if proper credentials are not entered.





